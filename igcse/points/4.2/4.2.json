{
  "4.2a: High-level and low-level languages": [
    {
      "type": "official",
      "text": "A [KEYWORD: high-level language]{a type of programming language that uses English-like commands.} is a type of programming language that uses words similar to human language, such as \"if\", \"print\", or \"input\". These languages are designed to be easy to understand, write, and debug."
    },
    {
      "type": "sub-official",
      "text": "High-level languages do not require knowledge of the computer’s hardware or instruction set."
    },
    {
      "type": "sub-official",
      "text": "They are often [KEYWORD: portable]{a program that can be run on different types and manufacturers of computers.}, meaning they can run on different types of computers."
    },
    {
      "type": "sub-official",
      "text": "Portable programs run on different computers without modification, because the high-level language is not tied to a specific machine architecture."
    },
    {
      "type": "sub-official",
      "text": "Programs written in high-level languages are generally easier to maintain over time."
    },
    {
      "type": "sub-official",
      "text": "Once you learn one high-level language, many of the same programming techniques apply to others like Python, Java, Visual Basic, or Pascal."
    },
    {
      "type": "official",
      "text": "A [KEYWORD: low-level language]{a language closer to the machine's language, this could be assembly language or binary code.} is closer to the computer's own language and is harder for humans to read and write."
    },
    {
      "type": "sub-official",
      "text": "Low-level languages include machine code (binary) and [KEYWORD: assembly language]{code written in mnemonics that allows direct manipulation of the hardware. It must be converted into binary code to run.} (mnemonics)."
    },
    {
      "type": "sub-official",
      "text": "These languages are specific to a computer's hardware and cannot easily be used on other systems."
    },
    {
      "type": "sub-official",
      "text": "They allow direct manipulation of the hardware, which can lead to faster and smaller programs."
    },
    {
      "type": "sub-official",
      "text": "Reasons to use a low-level language include faster execution, smaller memory use, and the ability to directly control hardware or use special machine instructions."
    },
    {
      "type": "sub-official",
      "text": "However, low-level programs take more time to develop and are more difficult to debug."
    },
    {
      "type": "example",
      "text": "Example: High-Level vs Low-Level Code\nThe high-level instruction `Sum := FirstNumber + SecondNumber` is simple and clear. In assembly language, the same task might require:\n```\nLDA First\nADD Second\nSTO Sum\n```\nIn [KEYWORD: machine code]{binary code, an example of a low-level language.}, this would become a set of binary or hexadecimal instructions like `0001 00010010`. This shows how high-level code is much easier to read and write."
    },
    {
      "type": "fun",
      "text": "Think of high-level languages like giving instructions to a friend: “Make me a sandwich.” Low-level languages are like saying, “Take two slices of bread, open the peanut butter jar, use a knife...” : more precise, but definitely more work!"
    }
  ],
  "4.2b: Assembly language and assembler": [
    {
      "type": "official",
      "text": "Assembly language is a type of low-level programming language that uses short commands (called mnemonics) to represent instructions."
    },
    {
      "type": "sub-official",
      "text": "Examples of [KEYWORD: mnemonics]{instruction code used in assembly language.} include LDA (load), ADD (add), and STO (store), each of which performs a specific operation on memory or data."
    },
    {
      "type": "sub-official",
      "text": "To understand and use assembly language, the programmer needs to know what each mnemonic means and how the hardware works."
    },
    {
      "type": "sub-official",
      "text": "Understanding assembly often requires knowledge of hardware parts like the accumulator, which is a special register used to temporarily store values during calculations."
    },
    {
      "type": "sub-official",
      "text": "Assembly language allows more control over memory use and performance, which can be useful for fast or memory-efficient programs."
    },
    {
      "type": "sub-official",
      "text": "In most cases, one assembly instruction is directly mapped to one machine code instruction, giving the programmer precise control over hardware behavior."
    },
    {
      "type": "sub-official",
      "text": "Assembly language must be translated into machine code before it can be executed."
    },
    {
      "type": "sub-official",
      "text": "In assembly language, the programmer must define and manage the memory addresses of variables manually, which offers precision but increases complexity."
    },
    {
      "type": "official",
      "text": "A program called an assembler is used to convert assembly language instructions into machine code."
    },
    {
      "type": "example",
      "text": "Example: Adding Numbers in Assembly\nThe following three assembly commands perform the same task as `Sum := FirstNumber + SecondNumber` in a high-level language:\n```\nLDA First\nADD Second\nSTO Sum\n```\nThis shows how a single high-level command might require multiple assembly instructions."
    },
    {
      "type": "fun",
      "text": "If assembly language were a dance routine, mnemonics would be the choreographer’s shorthand: “LDA” means “Step left and pose!” It’s more readable than binary, but you still need to know the moves!"
    },
    {
      "type": "example",
      "text": "Example: High-Level Code in Python : `print(\"Hello!\")` is easy to write and understand. It uses an English-like word, making programming feel more natural for beginners."
    }
  ],
  "4.2c: Compilers and interpreters": [
    {
      "type": "official",
      "text": "Computers only understand machine code, so programs written by humans must be translated before they can run."
    },
    {
      "type": "sub-official",
      "text": "A translator is a utility program that converts human-readable code into machine code."
    },
    {
      "type": "sub-official",
      "text": "Translators are categorized as compilers, interpreters, or assemblers, depending on the type of source code and how the translation occurs."
    },
    {
      "type": "official",
      "text": "A compiler translates the entire program written in a high-level language into machine code all at once."
    },
    {
      "type": "sub-official",
      "text": "If there are syntax errors, the [KEYWORD: compiler]{a computer program that translates a source program written in a high-level language to machine code} stops and produces an error report."
    },
    {
      "type": "sub-official",
      "text": "A compiler will only create an executable if there are no syntax errors in the program."
    },
    {
      "type": "sub-official",
      "text": "The error report from a compiler usually includes the line numbers and the type of each error."
    },
    {
      "type": "sub-official",
      "text": "If there are no errors, it creates an [KEYWORD: executable file]{a file produced by a compiler that can be run independent of translator software and does not include the source code.} that can be run repeatedly without translating again. This file is ready for distribution and doesn't need the compiler or source code to run."
    },
    {
      "type": "sub-official",
      "text": "Compiled programs do not need the source code or compiler to run, and the code is protected from being edited."
    },
    {
      "type": "official",
      "text": "An interpreter translates and runs one instruction at a time from a high-level language."
    },
    {
      "type": "sub-official",
      "text": "If there is a syntax error, it stops immediately and shows an error message."
    },
    {
      "type": "sub-official",
      "text": "Interpreted programs need to be translated every time they are run, which makes them slower."
    },
    {
      "type": "sub-official",
      "text": "Interpreters are often used during development because they allow real-time testing and [KEYWORD: debugging]{finding errors in a computer program by running or tracing the program}."
    },
    {
      "type": "official",
      "text": "An assembler is used to translate programs written in assembly language into machine code."
    },
    {
      "type": "example",
      "text": "Example: Interpreter vs Compiler Error Reporting : When using an interpreter, the program stops at the first error, allowing immediate fixes. A compiler checks the whole program and shows a list of all errors at once. This means interpreters are more useful during debugging, while compilers are more efficient for finished programs."
    },
    {
      "type": "example",
      "text": "Example: Compiler Output : A high-level command like `Sum := First + Second` may be translated to:\n```\n0001 00010010  ; load\n0100 00010011  ; add\n```\nThis shows how multiple binary instructions are produced from a single high-level line."
    },
    {
      "type": "fun",
      "text": "A compiler is like baking a cake and handing someone the finished product. An interpreter is like showing up with the ingredients and making the cake in front of them : every time they ask for a slice!"
    },
    {
      "type": "example",
      "text": "Example: One Instruction, Two Translators\nIf a program contains `Sum := FirstNumber + SecondNumber`, a compiler will convert the entire code into binary once. An [KEYWORD: interpreter]{a computer program that analyses and executes a program written in a high-level language line by line} will instead read and run this line each time the program is used, making it slower but useful during testing."
    }
  ],
  "4.2d: Advantages and disadvantages of compiler vs interpreter": [
    {
      "type": "official",
      "text": "Interpreters are more helpful during program development."
    },
    {
      "type": "sub-official",
      "text": "They allow programs to be debugged and tested more quickly by running code line by line."
    },
    {
      "type": "sub-official",
      "text": "The programmer can fix problems as they appear and continue testing from the same point."
    },
    {
      "type": "sub-official",
      "text": "Interpreted programs are easier to edit and test before they are finished."
    },
    {
      "type": "sub-official",
      "text": "Interpreters allow testing of incomplete programs, which helps developers find and fix errors early, even before the whole program is finished."
    },
    {
      "type": "sub-official",
      "text": "An interpreter is useful for debugging because it allows the programmer to test small parts of the code quickly and fix problems as they appear."
    },
    {
      "type": "sub-official",
      "text": "However, they require the interpreter software each time the program runs, and they are slower because they are retranslated every time."
    },
    {
      "type": "official",
      "text": "Compilers are more useful when the program is finished and ready for sharing or selling."
    },
    {
      "type": "sub-official",
      "text": "The compiler translates the entire program into machine code and creates an executable file."
    },
    {
      "type": "sub-official",
      "text": "The executable runs faster and does not need the compiler or source code to run."
    },
    {
      "type": "sub-official",
      "text": "A [KEYWORD: executable]{a file produced by a compiler that can be run independent of translator software and does not include the source code.} program can run without needing the compiler or the original source code, making it suitable for distribution."
    },
    {
      "type": "sub-official",
      "text": "The executable file protects the source code from copying or editing."
    },
    {
      "type": "sub-official",
      "text": "However, it takes more time to write, debug, and compile the program during development."
    },
    {
      "type": "example",
      "text": "Example: Using Translator Tools for a Game\nSaria uses an interpreter while writing a game to test and fix each part quickly. When she finishes, she compiles it into an executable file to send to users. The compiled version is faster, works without extra software, and hides the source code."
    },
    {
      "type": "fun",
      "text": "Using a compiler during development is like wrapping a present without checking what’s inside : risky! An interpreter lets you peek inside after every step, so surprises are less likely."
    }
  ],
  "4.2e: Role and functions of an IDE": [
    {
      "type": "official",
      "text": "An Integrated Development Environment (IDE) is software that helps programmers write, test, and run programs."
    },
    {
      "type": "sub-official",
      "text": "Some IDEs support one programming language (like PyCharm for Python), while others support many (like Visual Studio)."
    },
    {
      "type": "sub-official",
      "text": "A code [KEYWORD: editor]{a feature of an IDE that allows the user to enter and amend program code.} in the IDE allows the programmer to type and edit code directly."
    },
    {
      "type": "sub-official",
      "text": "The IDE includes a translator (compiler or interpreter) so the program can be run and tested."
    },
    {
      "type": "sub-official",
      "text": "The built-in [KEYWORD: translator]{converts a program written in a high-level language program into machine code} in an IDE works together with tools like error diagnostics, version control, and code navigation to help programming."
    },
    {
      "type": "official",
      "text": "Most IDEs also include debugging tools to help find and fix errors."
    },
    {
      "type": "sub-official",
      "text": "A [KEYWORD: runtime environment]{a feature of an IDE that allows a program to be run and lets the user interact with the program.} shows the program’s output while it runs."
    },
    {
      "type": "sub-official",
      "text": "A debugger can:\n- run the program line by line (single stepping)"
    },
    {
      "type": "sub-official",
      "text": "IDEs allow step-by-step (line-by-line) execution, which helps identify the exact location where logic errors occur during runtime.\n- stop the program at chosen points (breakpoints)\n- display current variable values (watch window)"
    },
    {
      "type": "official",
      "text": "Many modern IDEs include version control tools, which allow programmers to track changes to their code, undo mistakes, and collaborate with others more easily."
    },
    {
      "type": "official",
      "text": "IDEs also help while writing code by detecting and correcting errors early."
    },
    {
      "type": "sub-official",
      "text": "**Error diagnostics** shows mistakes as you type and may suggest fixes."
    },
    {
      "type": "sub-official",
      "text": "**[KEYWORD: auto-completion]{a feature of an editor that gives the user options when they start typing a command.}** suggests keywords or variables while typing."
    },
    {
      "type": "sub-official",
      "text": "**[KEYWORD: auto-correction]{a feature of an editor that identifies spelling errors and changes them.}** fixes common typing or syntax mistakes."
    },
    {
      "type": "sub-official",
      "text": "**Auto-documentation** explains the purpose of different parts of code."
    },
    {
      "type": "sub-official",
      "text": "IDEs may include extra features like bracket matching, version control systems, or auto-documentation tools to manage code changes and formatting."
    },
    {
      "type": "sub-official",
      "text": "**[KEYWORD: prettyprinting]{displaying source code using different colours and formatting, which make the code easier to read and understand}** formats code and uses colors to make it easier to read."
    },
    {
      "type": "example",
      "text": "Example: Multi-language IDE : Visual Studio supports C++, C#, and Python, while PyCharm focuses only on Python. This shows how some IDEs are designed for flexibility, while others are optimized for one language."
    },
    {
      "type": "example",
      "text": "Example: IDE Auto-Correction : If you mistype `prin`, the IDE suggests `print()` and may fix the typo automatically. This helps reduce errors and saves time."
    },
    {
      "type": "example",
      "text": "Example: Features of a Modern IDE\nIn Visual Studio, the code editor shows suggestions as you type (auto-completion), underlines mistakes in red (error diagnostics), and offers fixes (auto-correction). The debugger lets you step through the program and see what values are stored in each variable."
    },
    {
      "type": "fun",
      "text": "IDEs are like smart kitchens for coders : they suggest recipes (auto-completion), stop you if you mix up sugar and salt (error diagnostics), and even help you clean up after (auto-formatting)!"
    }
  ]
}