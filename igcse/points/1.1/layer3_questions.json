[
{
"point_id": "1.1a",
"question_number": 1,
"question": "Explain why computers use binary to represent all forms of data.",
"mark_scheme": "\nComputers are built from electronic switches and logic gates that operate in two stable states, OFF as 0 and ON as 1. \nUsing binary aligns data representation with these states. \nAll forms of data used by computers, such as text, images, and sound, are converted into sequences of 0s and 1s so that they can be stored, processed, and transmitted reliably."
},
{
"point_id": "1.1b",
"question_number": 2,
"question": "Define denary and binary, and state the key difference between them.",
"mark_scheme": "Denary is base 10 using digits 0 to 9 with place values in powers of 10. \nBinary is base 2 using digits 0 and 1 with place values in powers of 2. \nThe key difference is the base and the digit set."
},
{
"point_id": "1.1b",
"question_number": 3,
"question": "Calculate the 8-bit binary representations of 58 and 123.",
"mark_scheme": "58 = 00111010.\n123 = 01111011."
},
{
"point_id": "1.1b",
"question_number": 4,
"question": "Calculate the denary value of the binary number 01100011.",
"mark_scheme": "\n01100011 = 64 + 32 + 2 + 1 = 99."
},
{
"point_id": "1.1e",
"question_number": "5a",
"question": "Calculate the result of a logical shift right by 1 on the 8-bit binary 00110110, and give the denary value.",
"mark_scheme": "\nRule: logical shifts discard bits that exit the register and fill emptied positions with 0s.\n00110110 → 00011011 = 27."
},
{
"point_id": "1.1e",
"question_number": "5b",
"question": "Calculate the result of a logical shift left by 2 on the 8-bit binary 00110110, and give the denary value.",
"mark_scheme": "\nRule: logical shifts discard bits that exit the register and fill emptied positions with 0s.\n00110110 → 11011000 = 216."
},
{
"point_id": "1.1d",
"question_number": "6a",
"question": "Calculate the 8-bit sum of 123 + 55. Show the 8-bit result and indicate if overflow occurs.",
"mark_scheme": "\n01111011 + 00110111 = 10110010, no overflow."
},
{
"point_id": "1.1d",
"question_number": "6b",
"question": "Calculate the 8-bit sum of 123 + 180. Show the 8-bit result and indicate if overflow occurs.",
"mark_scheme": "\n01111011 + 10110100 = 00101111 with a carry out of the ninth bit, so overflow occurs."
},
{
"point_id": "1.1d",
"question_number": 7,
"question": "Explain what an overflow error is in 8-bit binary addition.",
"mark_scheme": "\nIf the true sum requires 9 bits, the extra carry cannot be stored in 8 bits. The recorded 8-bit result differs from the correct total. This condition is an overflow error."
},
{
"point_id": "1.1e",
"question_number": 8,
"question": "Describe what happens in a logical binary shift and why repeated left shifts can reduce accuracy.",
"mark_scheme": "\nA logical shift moves all bits left or right. Bits leaving the register are lost and 0s fill the emptied positions. Repeated left shifts can discard significant bits, so the value no longer tracks exact doubling."
},
{
"point_id": "1.1f",
"question_number": 9,
"question": "Explain how to obtain the two’s-complement 8-bit representation of −35, and give the result.",
"mark_scheme": "\nWrite +35 in binary (00100011), invert all bits (11011100), then add 1 → 11011101. So −35 = 11011101."
},
{
"point_id": "1.1f",
"question_number": 10,
"question": "State the range of 8-bit two’s-complement integers and how the sign is indicated.",
"mark_scheme": "\nRange: −128 to +127. The most significant bit indicates the sign: 0 is non-negative, 1 is negative."
},
{
"point_id": "1.1e",
"question_number": 11,
"question": "Predict the result of left-shifting the 8-bit value 00011000 five times and explain briefly.",
"mark_scheme": "\n00000000, because each shift moves bits left, 0s fill from the right, and the 1-bits are shifted out of the register."
},
{
"point_id": "1.1c",
"question_number": 12,
"question": "Calculate the binary representation of the hexadecimal value A2.",
"mark_scheme": "\nA2 → A = 1010, 2 = 0010 → 10100010."
},
{
"point_id": "1.1c",
"question_number": 13,
"question": "Calculate the hexadecimal representation of the binary value 100111010001.",
"mark_scheme": "\nGroup by 4 from the right: 1001 1101 0001 → 9D1."
},
{
"point_id": "1.1c",
"question_number": 14,
"question": "Explain why hexadecimal is a beneficial representation in computer science.",
"mark_scheme": "\nHexadecimal shortens long binary strings, is easier to read and check, maps exactly four bits to one digit for direct conversion, and is convenient for inspecting and debugging data."
},
{
"point_id": "1.1f",
"question_number": 15,
"question": "State the denary value of the 8-bit two’s-complement number 10111001.",
"mark_scheme": "\n−128 + 32 + 16 + 8 + 1 = −71."
}
]